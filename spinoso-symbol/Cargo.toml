[package]
name = "spinoso-symbol"
version = "0.3.0"
authors = ["Ryan Lopopolo <rjl@hyperbo.la>"]
edition = "2021"
rust-version = "1.62.0"
description = """
Symbol implementation for Ruby Symbol core type in Artichoke Ruby
"""
repository = "https://github.com/artichoke/artichoke"
readme = "README.md"
license = "MIT"
keywords = ["ident", "intern", "no_std", "spinoso", "symbol"]
categories = ["data-structures", "no-std", "parser-implementations"]

[dependencies]
artichoke-core = { version = "0.12.0", path = "../artichoke-core", optional = true, default-features = false }
bstr = { version = "0.2.9", optional = true, default-features = false }
focaccia = { version = "1.1.0", optional = true, default-features = false }
qed = "1.3.0"
scolapasta-string-escape = { version = "0.3.0", path = "../scolapasta-string-escape", optional = true, default-features = false }

[features]
default = ["artichoke", "std"]
# Implement the Ruby `Symbol` API from Ruby Core with a generic interner defined
# by the traits in `artichoke-core`. Implement Ruby Core APIs with Unicode case
# folding support.
#
# Enabling this feature activates the `inspect` feature and additionally depends
# on `bstr`.
#
# When this feature is enabled, several types are re-exported from `focaccia`.
artichoke = ["dep:artichoke-core", "dep:focaccia", "inspect"]
# Implement an iterator for printing debug output of a byte string associated
# with a `Symbol` that is suitable for implementing `Symbol#inspect`.
inspect = ["ident-parser", "dep:scolapasta-string-escape"]
# Add a parser for valid Ruby identifiers.
ident-parser = ["dep:bstr"]
# By default, `spinoso-symbol` is `no_std`. This feature enables
# `std::error::Error` impls. This feature activates `focaccia/std` if the
# `focaccia` feature is enabled to enable `Error` impls on the re-exported error
# structs.
std = ["focaccia?/std"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
